#include<stdio.h>
#include<stdlib.h>
#include<math.h>
#include<complex.h>

double complex plainmc(int dim,double f(int dim,double* x),double* a,double* b,int N); // Der bruges complex for at få retuneret to værdier både resultatet af integralet(real delen) og fejlen(imaginær delen)

double fun(int dim,double* x){
double value=0;
for(int i=0;i<dim;i++)value=value+x[i];
return value;
}

double fun_e(int dim,double* x){
double value=exp((x[0]+x[1])*(x[0]+x[1]));
return value;
}

double fun_opgaveformulering(int dim, double* x){
double value=(double) 1/(1-cos(x[0])*cos(x[1])*cos(x[2]))*1/(M_PI*M_PI*M_PI);
return value;
}

int main(){

//OPGAVE A//

//Test f(x,y,z,u)=x+y+z+u
int dim=4;
double a[]={0,0,0,0};
double b[]={1,1,1,1};

double complex test=plainmc(dim,fun,a,b,100000);
printf("Testen er blot x+y+z+u, fra 0 til 1 langs alle kanter, så svaret bør være 2,0\n");
printf("Test forsøg resultat=%f\n",creal(test));
printf("Test forsøg fejl=%f\n",cimag(test));
printf("Det passer fint med det analytiske hvor vi brugte 100000 punkter\n\n");

//Test 2 med lidt sværere f(x,y)=e^(x+y)^2
int dim2=2;
double a2[]={0,0};
double b2[]={1,1};

double complex test2=plainmc(dim2,fun_e,a2,b2,1000000);

printf("Testen er nu exp(x+y)^2, fra 0 til 1 langs begge kanter, så svaret bør være 4,8992\n");
printf("Test forsøg resultat=%f\n",creal(test2));
printf("Test forsøg fejl=%f\n",cimag(test2));
printf("Det passer ikke lige så godt, men stadig godt. Her var brugt 1000000 punkter. (et 0 mere end før)\n\n");


//Test 3 funktionen fra opgave formuleringen
int dim3=3;
double a3[]={0,0,0};
double b3[]={M_PI,M_PI,M_PI};

double complex test3=plainmc(dim3,fun_opgaveformulering,a3,b3,10000000);

printf("Testen er nu fra opgaveformuleringen, fra 0 til pi langs alle 3 kanter, så svaret bør være omkring 1,3932039297\n");
printf("Test forsøg resultat=%f\n",creal(test3));
printf("Test forsøg fejl=%f\n",cimag(test3));
printf("Det passer ikke lige så godt, men det forventede er indne for fejlen. Her var brugt 10000000 punkter. (et 0 mere end før)\n\n");

//OPGAVE B//





return 0;
}


